// –û–±—ä–µ–∫—Ç —Å —Å–∏–º–≤–æ–ª–∞–º–∏ –∏ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—è–º–∏
const symbols = {
    "üçí": { 8: 0.25, 9: 0.75, 10: 2 },
    "üçã": { 8: 0.40, 9: 0.90, 10: 4 },
    "üçä": { 8: 0.50, 9: 1, 10: 5 },
    "üçá": { 8: 0.80, 9: 1.20, 10: 8 },
    "üçâ": { 8: 1, 9: 1.5, 10: 10 },
    "üçè": { 8: 1.5, 9: 2, 10: 12 },
    "üçì": { 8: 2, 9: 5, 10: 15 },
    "üçÜ": { 8: 2.5, 9: 10, 10: 25 },
    "üç¨": { 8: 10, 9: 25, 10: 50 }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Å–∏–º–≤–æ–ª–∞
function getRandomSymbol() {
    const symbolsKeys = Object.keys(symbols);
    return symbolsKeys[Math.floor(Math.random() * symbolsKeys.length)];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∑–∞–º–µ–Ω—ã –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
function checkAndReplaceWinningCombination(slots) {
    let totalWinnings = 0;

    // –°–æ–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã —Å —Ä–µ–µ–ª–æ–≤ –≤ –º–∞—Å—Å–∏–≤
    const symbolsOnReels = Array.from(slots, slot => slot.textContent);
    // –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    let symbolsCount = symbolsOnReels.reduce((acc, symbol) => {
        acc[symbol] = (acc[symbol] || 0) + 1;
        return acc;
    }, {});

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª –Ω–∞ –≤—ã–∏–≥—Ä—ã—à–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
    for (let symbol in symbolsCount) {
        let count = symbolsCount[symbol];
        if (symbols[symbol] && symbols[symbol][count]) {
            totalWinnings += symbols[symbol][count];
            // –ó–∞–º–µ–Ω—è–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–æ–≤—ã–º–∏
            for (let i = 0; i < slots.length; i++) {
                if (slots[i].textContent === symbol) {
                    slots[i].textContent = getRandomSymbol();
                }
            }
        }
    }

    return totalWinnings;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã
function updateBalanceAndResult(winnings, winningSymbol, count) {
    const balanceElement = document.getElementById('balance');
    let balance = parseInt(balanceElement.innerText);
    const resultElement = document.getElementById('result');
    const roundInfoElement = document.getElementById('roundInfo');

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à –∫ –±–∞–ª–∞–Ω—Å—É
    balance += winnings;

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—ã–∏–≥—Ä—ã—à –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
    if (winnings > 0) {
        resultElement.innerText = `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${winnings} –±–∞–ª–ª–æ–≤! –°–∏–º–≤–æ–ª: ${winningSymbol} (${count} —à—Ç)`;
    } else {
        resultElement.innerText = "–í—ã –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏ –Ω–∏—á–µ–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!";
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    balanceElement.innerText = balance;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∫—Ä—É–≥–µ
    const currentRound = parseInt(roundInfoElement.innerText.split(':')[1].trim()) + 1;
    roundInfoElement.innerText = `–¢–µ–∫—É—â–∏–π –∫—Ä—É–≥: ${currentRound}. –í—ã–∏–≥—Ä—ã—à: ${winnings}`;
}

// –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–Ω–æ–ø–∫–µ "Spin" –∏ –∫ –±–∞—Ä–∞–±–∞–Ω–∞–º —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã
const spinBtn = document.getElementById('spinBtn');
const slots = document.querySelectorAll('.slot');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ø–∏–Ω–∞
function spin() {
    const balanceElement = document.getElementById('balance');
    let balance = parseInt(balanceElement.innerText);
    const spinCost = 1; // –°—Ç–æ–∏–º–æ—Å—Ç—å —Å–ø–∏–Ω–∞

    if (balance >= spinCost) {
        balance -= spinCost;
        balanceElement.innerText = balance;

        // –ó–∞–º–µ–Ω—è–µ–º —Å–∏–º–≤–æ–ª—ã –Ω–∞ —Ä–µ–µ–ª–∞—Ö
        slots.forEach(slot => slot.textContent = getRandomSymbol());

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–º–µ–Ω—è–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏, –∞ —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
        let winnings = checkAndReplaceWinningCombination(slots);
        if (winnings > 0) {
            updateBalanceAndResult(winnings); // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã
        } else {
            updateBalanceAndResult(0); // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã –±–µ–∑ –≤—ã–∏–≥—Ä—ã—à–∞
        }
    } else {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        alert("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–ø–∏–Ω–∞!");
    }
}

// –ü—Ä–∏–≤—è–∑–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ spin –∫ –∫–Ω–æ–ø–∫–µ
spinBtn.addEventListener('click', spin);
